# -*- coding: utf-8 -*-
"""Reimagining customer experience with emerging technologies.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sJ1n76w8aViDHocu_mQm0zIeerwqi5qt
"""
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# Load and clean data
df = pd.read_csv("retail_products_100.csv")
df["numeric_price"] = df["price"].str.replace("‚Çπ", "").str.replace(",", "").astype(int)

# Page config and background styling
st.set_page_config(page_title="üõçÔ∏è SmartShop AI", layout="wide")
st.markdown(
    '''
    <style>
    body {
        background: linear-gradient(to right, #ff7e5f, #feb47b);
        font-family: 'Arial', sans-serif;
    }
    .big-title {
        font-size: 3em;
        font-weight: bold;
        color: #ffffff;
        text-align: center;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
    }
    .tagline {
        font-size: 1.5em;
        font-weight: 500;
        text-align: center;
        color: #ffffff;
        margin-bottom: 20px;
    }
    .motion-box {
        transition: transform 0.3s;
        border-radius: 15px;
        padding: 20px;
        background-color: rgba(255, 255, 255, 0.9);
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }
    .motion-box:hover {
        transform: scale(1.05);
    }
    </style>
    ''',
    unsafe_allow_html=True
)

# Header
st.markdown('<div class="big-title">SmartShop üõí</div>', unsafe_allow_html=True)
st.markdown('<div class="tagline">Your AI-powered fashion and product companion ‚ú®</div>', unsafe_allow_html=True)

# Price range slider
min_price, max_price = st.slider("Select your price range:", 0, 5000, (0, 3000))

# Category filter
categories = df['category'].unique().tolist()
selected_category = st.selectbox("Select a category:", ["All"] + categories)

# Color filter
colors = df['color'].unique().tolist()
selected_color = st.selectbox("Select a color:", ["All"] + colors)

# Generate AI-style response
def generate_response(q):
    q = q.lower()
    if "budget" in q or "under" in q:
        return "üí∏ Here's what I found for your price range:"
    elif "eco" in q or "recycled" in q:
        return "üåø Love your choice! Here are some eco-friendly picks:"
    elif "gym" in q:
        return "üèãÔ∏è Check out these sporty items for gym-goers!"
    else:
        return "üõçÔ∏è Here's what I think you'll love:"

# Filtering logic
def filter_products(limit, category, color):
    result = df.copy()
    result = result[(result["numeric_price"] >= limit[0]) & (result["numeric_price"] <= limit[1])]
    if category != "All":
        result = result[result["category"] == category]
    if color != "All":
        result = result[result["color"] == color]
    return result.head(9)

# Display product statistics
def display_statistics():
    category_counts = df['category'].value_counts()
    plt.figure(figsize=(10, 5))
    plt.bar(category_counts.index, category_counts.values, color='skyblue')
    plt.title('Product Categories Distribution')
    plt.xlabel('Categories')
    plt.ylabel('Number of Products')
    st.pyplot(plt)

# Display statistics
st.markdown("### üìä Product Statistics")
display_statistics()

# Chat interface
if st.button("Show Products"):
    results = filter_products((min_price, max_price), selected_category, selected_color)

    if results.empty:
        st.warning("üö´ No products found for your query.")
    else:
        cols = st.columns(3)
        for i, (_, row) in enumerate(results.iterrows()):
            with cols[i % 3]:
                st.markdown('<div class="motion-box">', unsafe_allow_html=True)
                try:
                    st.image(row["image_url"], width=200)
                except:
                    st.image("https://via.placeholder.com/200x200?text=No+Image", width=200)
                st.markdown(f"**{row['title']}**")
                st.markdown(f"üí∞ ‚Çπ{row['numeric_price']}  \nüè∑Ô∏è {row['category']}")
                st.markdown(f"üé® {row['color']} | üßµ {row['material']}")
                st.markdown(f"‚≠ê {row['rating']}/5")
                st.caption(row["description"])
                st.markdown('</div>', unsafe_allow_html=True)

st.markdown("---")
st.caption("üöÄ Built by Team AI Avengers for Walmart Hackathon 2025")


